CCS PCM C Compiler, Version 4.074, 22034               09-Jun-22 15:15

               Filename: 7 segment with button.lst

               ROM used: 173 words (2%)
                         Largest free fragment is 2048
               RAM used: 7 (2%) at main() level
                         9 (2%) worst case
               Stack:    1 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   083
0003:  NOP
.................... #include<16F887.h> 
.................... //////// Standard Header file for the PIC16F887 device //////////////// 
.................... #device PIC16F887 
.................... #list 
....................  
.................... #DEVICE *=16 ADC=10  
.................... #FUSES HS,NOWDT,NOPUT,NOLVP  
.................... #USE DELAY(CLOCK=20M)  
*
000C:  MOVLW  22
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   01F
0012:  MOVLW  06
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  7B
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  DECFSZ 00,F
001E:  GOTO   012
.................... #include<luutinh.h> 
.................... // register definitions 
....................  
....................  
.................... #use fast_io(b) 
.................... #use fast_io(a) 
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
.................... #use rs232(baud=19200,parity=n,xmit=pin_C6,rcv=pin_c7,bits=9) 
.................... #define W 0 
.................... #define F 1 
....................  
.................... // register files 
.................... #byte INDF          =0x00 
.................... #byte TMR0          =0x01 
.................... #byte PCL           =0x02 
.................... #byte STATUS        =0x03 
.................... #byte FSR           =0x04 
.................... #byte PORTA         =0x05 
.................... #byte PORTB         =0x06 
.................... #byte PORTC         =0x07 
.................... #byte PORTD         =0x08 
.................... #byte PORTE         =0x09 
....................  
.................... #byte EEDATA        =0x10C 
.................... #byte EEADR         =0x10D 
.................... #byte EEDATH        =0x10E 
.................... #byte EEADRH         =0x10F 
.................... #byte ADCON0     =0x1F 
.................... #byte ADCON1     =0x9F 
.................... #byte ADRESH     =0x9F 
.................... #byte ADSESL     =0x9F 
....................  
.................... #byte PCLATH        =0x0a 
.................... #byte INTCON        =0x0b 
.................... #byte PIR1    =0x0c 
.................... #byte PIR2    =0x0d 
.................... #byte PIE1    =0x8c 
.................... #byte PIE2    =0x8d 
....................  
.................... #byte OPTION_REG    =0x81 
.................... #byte TRISA         =0x85 
.................... #byte TRISB         =0x86 
.................... #byte TRISC         =0x87 
.................... #byte TRISD         =0x88 
.................... #byte TRISE         =0x89 
....................  
.................... #byte EECON1        =0x18C 
.................... #byte EECON2        =0x18D 
....................  
.................... //DINH NGHIA BIT 
.................... #bit RA5   =0x05.5 
.................... #bit RA4   =0x05.4 
.................... #bit RA3   =0x05.3 
.................... #bit RA2   =0x05.2 
.................... #bit RA1   =0x05.1 
.................... #bit RA0   =0x05.0 
....................  
.................... #bit RB7   =0x06.7 
.................... #bit RB6   =0x06.6 
.................... #bit RB5   =0x06.5 
.................... #bit RB4   =0x06.4 
.................... #bit RB3   =0x06.3 
.................... #bit RB2   =0x06.2 
.................... #bit RB1   =0x06.1 
.................... #bit RB0   =0x06.0 
....................  
.................... #bit RC7   =0x07.7 
.................... #bit RC6   =0x07.6 
.................... #bit RC5   =0x07.5 
.................... #bit RC4   =0x07.4 
.................... #bit RC3   =0x07.3 
.................... #bit RC2   =0x07.2 
.................... #bit RC1   =0x07.1 
.................... #bit RC0   =0x07.0 
....................  
.................... #bit RD7   =0x08.7 
.................... #bit RD6   =0x08.6 
.................... #bit RD5   =0x08.5 
.................... #bit RD4   =0x08.4 
.................... #bit RD3   =0x08.3 
.................... #bit RD2   =0x08.2 
.................... #bit RD1   =0x08.1 
.................... #bit RD0   =0x08.0 
....................  
.................... #bit RE2   =0x09.2 
.................... #bit RE1   =0x09.1 
.................... #bit RE0   =0x09.0 
....................  
....................  
.................... #bit TRISA5   =0x85.5 
.................... #bit TRISA4   =0x85.4 
.................... #bit TRISA3   =0x85.3 
.................... #bit TRISA2   =0x85.2 
.................... #bit TRISA1   =0x85.1 
.................... #bit TRISA0   =0x85.0 
....................  
.................... #bit TRISB7   =0x86.7 
.................... #bit TRISB6   =0x86.6 
.................... #bit TRISB5   =0x86.5 
.................... #bit TRISB4   =0x86.4 
.................... #bit TRISB3   =0x86.3 
.................... #bit TRISB2   =0x86.2 
.................... #bit TRISB1   =0x86.1 
.................... #bit TRISB0   =0x86.0 
....................  
.................... #bit TRISC7   =0x87.7 
.................... #bit TRISC6   =0x87.6 
.................... #bit TRISC5   =0x87.5 
.................... #bit TRISC4   =0x87.4 
.................... #bit TRISC3   =0x87.3 
.................... #bit TRISC2   =0x87.2 
.................... #bit TRISC1   =0x87.1 
.................... #bit TRISC0   =0x87.0 
....................  
.................... #bit TRISD7   =0x88.7 
.................... #bit TRISD6   =0x88.6 
.................... #bit TRISD5   =0x88.5 
.................... #bit TRISD4   =0x88.4 
.................... #bit TRISD3   =0x88.3 
.................... #bit TRISD2   =0x88.2 
.................... #bit TRISD1   =0x88.1 
.................... #bit TRISD0   =0x88.0 
....................  
.................... #bit TRISE2   =0x89.2 
.................... #bit TRISE1   =0x89.1 
.................... #bit TRISE0   =0x89.0 
....................  
.................... // INTCON Bits for C 
.................... #bit gie    = 0x0b.7 
.................... #bit peie = 0x0b.6 
.................... #bit tmr0ie = 0x0b.5 
.................... #bit int0ie = 0x0b.4 
.................... #bit rbie   = 0x0b.3 
.................... #bit tmr0if    = 0x0b.2 
.................... #bit int0if    = 0x0b.1 
.................... #bit rbif    = 0x0b.0 
....................  
.................... // PIR1 for C 
.................... #bit pspif  = 0x0c.7 
.................... #bit adif    = 0x0c.6 
.................... #bit rcif    = 0x0c.5 
.................... #bit txif    = 0x0c.4 
.................... #bit sspif    = 0x0c.3 
.................... #bit ccp1if    = 0x0c.2 
.................... #bit tmr2if    = 0x0c.1 
.................... #bit tmr1if    = 0x0c.0 
....................  
.................... //PIR2 for C 
.................... #bit cmif    = 0x0d.6 
.................... #bit eeif    = 0x0d.4 
.................... #bit bclif  = 0x0d.3 
.................... #bit ccp2if    = 0x0d.0 
....................  
.................... // PIE1 for C 
.................... #bit adie    = 0x8c.6 
.................... #bit rcie    = 0x8c.5 
.................... #bit txie    = 0x8c.4 
.................... #bit sspie    = 0x8c.3 
.................... #bit ccp1ie    = 0x8c.2 
.................... #bit tmr2ie    = 0x8c.1 
.................... #bit tmr1ie    = 0x8c.0 
....................  
.................... //PIE2 for C 
.................... #bit osfie    = 0x8d.7 
.................... #bit cmie    = 0x8d.6 
.................... #bit eeie   = 0x8d.4 
....................  
.................... // OPTION Bits 
.................... #bit not_rbpu   = 0x81.7 
.................... #bit intedg     = 0x81.6 
.................... #bit t0cs       = 0x81.5 
.................... #bit t0se       = 0x81.4 
.................... #bit psa        = 0x81.3 
.................... #bit ps2        = 0x81.2 
.................... #bit ps1        = 0x81.1 
.................... #bit ps0        = 0x81.0 
....................  
.................... // EECON1 Bits 
.................... #bit eepgd   = 0x18c.7 
.................... #bit free      = 0x18C.4 
.................... #bit wrerr     = 0x18C.3 
.................... #bit wren       = 0x18C.2 
.................... #bit wr         = 0x18C.1 
.................... #bit rd         = 0x18C.0 
....................  
.................... //ADCON0 
.................... #bit CHS0    =0x1F.3 
.................... #bit CHS1    =0x1F.4 
.................... #bit CHS2    =0x1F.5 
.................... // uast 
.................... #byte txreg=0x19 
.................... #byte rc=0x1a 
.................... #byte spbrg=0x99 
.................... #bit  rxd=0x18.0 
.................... #bit  spen=0x18.7 
....................  
.................... #byte txsta=0x98 
.................... #bit  master=0x98.7 
.................... #bit  phat =0x98.4 
.................... #bit txen=0x98.5 
.................... #bit tx9=0x98.6 
....................  
.................... //=====SPI 
.................... #byte SSPBUF= 0X13 
.................... #byte SSPCON =0X14 
.................... #bit SSPEN =0X14.5 
....................  
.................... //#pwm 
.................... #byte dc1=0x15 
....................  
....................  
.................... unsigned char x = 0; 
*
00A1:  BCF    03.6
00A2:  CLRF   20
.................... const char led7[] = {0x3f,0x06, 0x5b, 0x4f,0x66,0x6d, 0x7d, 0x07,0x7f,0x6f,0x77,0x7c,0x39,0x5e,0x79,0x71}; 
....................                   //  0    1     2     3    4    5     6     7    8    9    A    B    C    D    E    F   
.................... void Button_1(){ 
.................... if(input(pin_c7)==0) 
*
0004:  BTFSC  07.7
0005:  GOTO   021
.................... { 
.................... x=x+1; 
0006:  MOVLW  01
0007:  ADDWF  20,F
.................... delay_ms(300); 
0008:  MOVLW  02
0009:  MOVWF  21
000A:  MOVLW  96
000B:  MOVWF  22
*
001F:  DECFSZ 21,F
0020:  GOTO   00A
.................... } 
.................... if(x==1) 
0021:  DECFSZ 20,W
0022:  GOTO   025
.................... { 
....................  
.................... output_d(~led7[0]); 
0023:  MOVLW  C0
0024:  MOVWF  08
.................... } 
.................... if(x==2) 
0025:  MOVF   20,W
0026:  SUBLW  02
0027:  BTFSS  03.2
0028:  GOTO   02B
.................... { 
....................  
.................... output_d(~led7[1]); 
0029:  MOVLW  F9
002A:  MOVWF  08
.................... } 
....................  
.................... if(x==3) 
002B:  MOVF   20,W
002C:  SUBLW  03
002D:  BTFSS  03.2
002E:  GOTO   031
.................... { 
....................  
.................... output_d(~led7[2]); 
002F:  MOVLW  A4
0030:  MOVWF  08
....................  
.................... } 
.................... if(x==4) 
0031:  MOVF   20,W
0032:  SUBLW  04
0033:  BTFSS  03.2
0034:  GOTO   037
.................... { 
....................  
.................... output_d(~led7[3]); 
0035:  MOVLW  B0
0036:  MOVWF  08
....................  
.................... } 
.................... if(x==5) 
0037:  MOVF   20,W
0038:  SUBLW  05
0039:  BTFSS  03.2
003A:  GOTO   03D
.................... { 
....................  
.................... output_d(~led7[4]); 
003B:  MOVLW  99
003C:  MOVWF  08
....................  
.................... } 
.................... if(x==6) 
003D:  MOVF   20,W
003E:  SUBLW  06
003F:  BTFSS  03.2
0040:  GOTO   043
.................... { 
....................  
.................... output_d(~led7[5]); 
0041:  MOVLW  92
0042:  MOVWF  08
....................  
.................... } 
....................  
.................... if(x==7) 
0043:  MOVF   20,W
0044:  SUBLW  07
0045:  BTFSS  03.2
0046:  GOTO   049
.................... { 
....................  
.................... output_d(~led7[6]); 
0047:  MOVLW  82
0048:  MOVWF  08
....................  
.................... } 
....................  
.................... if(x==8) 
0049:  MOVF   20,W
004A:  SUBLW  08
004B:  BTFSS  03.2
004C:  GOTO   04F
.................... { 
....................  
.................... output_d(~led7[7]); 
004D:  MOVLW  F8
004E:  MOVWF  08
....................  
.................... } 
....................  
....................  
.................... if(x==9) 
004F:  MOVF   20,W
0050:  SUBLW  09
0051:  BTFSS  03.2
0052:  GOTO   055
.................... { 
....................  
.................... output_d(~led7[8]); 
0053:  MOVLW  80
0054:  MOVWF  08
....................  
.................... } 
.................... if(x==10) 
0055:  MOVF   20,W
0056:  SUBLW  0A
0057:  BTFSS  03.2
0058:  GOTO   05B
.................... { 
....................  
.................... output_d(~led7[9]); 
0059:  MOVLW  90
005A:  MOVWF  08
....................  
.................... } 
....................  
.................... if(x==11) 
005B:  MOVF   20,W
005C:  SUBLW  0B
005D:  BTFSS  03.2
005E:  GOTO   061
.................... { 
....................  
.................... output_d(~led7[10]); 
005F:  MOVLW  88
0060:  MOVWF  08
....................  
.................... } 
.................... if(x==12) 
0061:  MOVF   20,W
0062:  SUBLW  0C
0063:  BTFSS  03.2
0064:  GOTO   067
.................... { 
....................  
.................... output_d(~led7[11]); 
0065:  MOVLW  83
0066:  MOVWF  08
....................  
.................... } 
....................  
.................... if(x==13) 
0067:  MOVF   20,W
0068:  SUBLW  0D
0069:  BTFSS  03.2
006A:  GOTO   06D
.................... { 
....................  
.................... output_d(~led7[12]); 
006B:  MOVLW  C6
006C:  MOVWF  08
....................  
.................... } 
....................  
.................... if(x==14) 
006D:  MOVF   20,W
006E:  SUBLW  0E
006F:  BTFSS  03.2
0070:  GOTO   073
.................... { 
....................  
.................... output_d(~led7[13]); 
0071:  MOVLW  A1
0072:  MOVWF  08
....................  
.................... } 
....................  
.................... if(x==15) 
0073:  MOVF   20,W
0074:  SUBLW  0F
0075:  BTFSS  03.2
0076:  GOTO   079
.................... { 
....................  
.................... output_d(~led7[14]); 
0077:  MOVLW  86
0078:  MOVWF  08
....................  
.................... } 
....................  
.................... if(x==16) 
0079:  MOVF   20,W
007A:  SUBLW  10
007B:  BTFSS  03.2
007C:  GOTO   080
.................... { 
....................  
.................... output_d(~led7[15]); 
007D:  MOVLW  8E
007E:  MOVWF  08
.................... x=0; 
007F:  CLRF   20
.................... } 
.................... } 
0080:  BCF    0A.3
0081:  BCF    0A.4
0082:  GOTO   0AB (RETURN)
.................... void main() 
.................... { 
0083:  CLRF   04
0084:  BCF    03.7
0085:  MOVLW  1F
0086:  ANDWF  03,F
0087:  BSF    03.5
0088:  BSF    03.6
0089:  BCF    07.3
008A:  MOVLW  40
008B:  BCF    03.6
008C:  MOVWF  19
008D:  MOVLW  E6
008E:  MOVWF  18
008F:  MOVLW  D0
0090:  BCF    03.5
0091:  MOVWF  18
0092:  BSF    03.5
0093:  BSF    03.6
0094:  MOVF   09,W
0095:  ANDLW  C0
0096:  MOVWF  09
0097:  BCF    03.6
0098:  BCF    1F.4
0099:  BCF    1F.5
009A:  MOVLW  00
009B:  BSF    03.6
009C:  MOVWF  08
009D:  BCF    03.5
009E:  CLRF   07
009F:  CLRF   08
00A0:  CLRF   09
....................  
.................... set_tris_c(0xff);  
*
00A3:  MOVLW  FF
00A4:  BSF    03.5
00A5:  MOVWF  07
.................... set_tris_d(0x00);  
00A6:  MOVLW  00
00A7:  MOVWF  08
....................  
.................... output_d(0x00); 
00A8:  BCF    03.5
00A9:  CLRF   08
....................  
....................  
.................... while(TRUE) 
.................... { 
....................  
.................... Button_1(); 
00AA:  GOTO   004
....................  
.................... } 
00AB:  GOTO   0AA
....................  
.................... } 
00AC:  SLEEP

Configuration Fuses:
   Word  1: 2FF2   HS NOWDT NOPUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   NOWRT BORV40
